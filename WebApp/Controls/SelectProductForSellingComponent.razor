@inject IViewCategoriesUseCase _categories
@inject IViewProductByCategoryId _categoryById
<div class="form-group">
    <label for="category">Category</label>
    <select class="form-select" id="category" @bind="SelectedCategoryId">
        <option selected>Selected</option>
        @foreach (var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>
</div>
@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Qty</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsInCategory)
            {
                <tr @onclick="@(() => OnSelectProduct(product))" style="@(product.ProductId == selectedProductId ? "cursor:pointer;background-color:beige" : "cursor:pointer;")">
                    <td>@product.Name</td>
                    <td>@product.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h3>No products...</h3>
}
@code {
    private IEnumerable<Product> productsInCategory;
    private int selectedProductId;
    [Parameter]
    public EventCallback<Product> OnProductSelect { get; set; }
    private int selectedCategoryId;
    private int SelectedCategoryId
    {
        get
        {
            return selectedCategoryId;
        }
        set
        {
            selectedCategoryId = value;
            productsInCategory = _categoryById.Execute(value);
            OnSelectProduct(null);
            StateHasChanged();
        }
    }
    private List<Category> categories;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetCategories();
    }
    private void OnSelectProduct(Product product)
    {
        OnProductSelect.InvokeAsync(product);
        if (product != null) selectedProductId = product.ProductId;
    }
    private void GetCategories()
    {
        categories = _categories.Execute().ToList();
    }
}
