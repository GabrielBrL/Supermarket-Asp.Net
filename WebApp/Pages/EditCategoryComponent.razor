@page "/editcategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]
@inject NavigationManager navManager
@inject IGetCategoryByIdUseCase getCategoryById
@inject IEditCategoryUseCase editCategory
<h3>Edit Category</h3>

@if (_category != null)
{
    <EditForm Model="_category" class="form-inline" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="_category.Name" autocomplete="off" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="_category.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary mt-5">Save</button>
        <button type="button" class="btn btn-danger mt-5" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string categoryId { get; set; }
    private Category _category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Int32.TryParse(categoryId, out int id))
        {
            var category = getCategoryById.Execute(id);
            _category = new Category()
            {
                CategoryId = category.CategoryId,
                Name = category.Name,
                Description = category.Description
            };
        }
    }
    private void OnValidSubmit()
    {
        editCategory.Execute(_category);
        navManager.NavigateTo("/categories");
    }
    private void OnCancel()
    {
        navManager.NavigateTo("/categories");
    }
}
